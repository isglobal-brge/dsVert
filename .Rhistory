devtools::load_all(".")
knitr::opts_chunk$set(echo = TRUE)
A <- matrix(c(3, -1, 1, 3, 1, 1, 4, -2,5,1), nrow = 5, ncol = 2, byrow = TRUE)
print(A)
n <- dim(A)[2] # Number of columns in A
k <- floor(n/2) # Split point for two partitions
A <- scale(A)
A1 <- A[, 1:k]
A2 <- A[, (k+1):n]
corr <- vertical_corr(A1,A2)
corr
# Load the datasets
data(mtcars)
data(iris)
# Ensure iris dataset is numeric only
iris <- iris[, sapply(iris, is.numeric)]
# Split the datasets into two partitions
partition1_mtcars <- mtcars[, 1:6]
partition2_mtcars <- mtcars[, 7:ncol(mtcars)]
partition1_iris <- iris[, 1:2]
partition2_iris <- iris[, 3:4]
# Run the vertical_corr function on the partitions
correlation_mtcars <- vertical_corr(partition1_mtcars, partition2_mtcars)
correlation_iris <- vertical_corr(partition1_iris, partition2_iris)
# Print out the results
#print(correlation_mtcars)
print(correlation_iris)
cor(iris)
cor(mtcars)
vertical_corr(partition1_mtcars,partition2_mtcars)
View(mtcars)
View(mtcars)
View(iris)
View(iris)
block_svd_correlation <- function(partition1, partition2) {
# Perform SVD on each partition
svd1 <- svd(scale(partition1))
svd2 <- svd(scale(partition2))
# Combine the left singular vectors weighted by their singular values
U_combined <- cbind(svd1$u %*% diag(svd1$d), svd2$u %*% diag(svd2$d))
# Perform SVD on the combined U matrix
svd_combined <- svd(U_combined)
# Calculate the correlation matrix
V <- svd_combined$v
D_squared <- diag(svd_combined$d^2)
correlation <- V %*% D_squared %*% t(V)
# Normalize the correlation matrix
diag(correlation) <- 1
correlation[lower.tri(correlation)] <- correlation[upper.tri(correlation)]
return(correlation)
}
block_svd_correlation(partition1_iris,partition2_iris)
block_svd_correlation <- function(partition1, partition2) {
# Perform SVD on each partition
svd1 <- svd(scale(partition1))
svd2 <- svd(scale(partition2))
# Combine the left singular vectors weighted by their singular values
U_combined <- cbind(svd1$u %*% diag(svd1$d), svd2$u %*% diag(svd2$d))
# Perform SVD on the combined U matrix
svd_combined <- svd(U_combined)
# Calculate the correlation matrix
V <- svd_combined$v
D_squared <- diag(svd_combined$d^2)
correlation <- V %*% D_squared %*% t(V)
# Normalize the correlation matrix
#diag(correlation) <- 1
#correlation[lower.tri(correlation)] <- correlation[upper.tri(correlation)]
return(correlation/correlation[1,1])
}
block_svd_correlation(partition1_iris,partition2_iris)
# Load the datasets
data(mtcars)
data(iris)
# Ensure iris dataset is numeric only
iris <- iris[, sapply(iris, is.numeric)]
# Split the datasets into two partitions
partition1_mtcars <- mtcars[, 1:6]
partition2_mtcars <- mtcars[, 7:ncol(mtcars)]
partition1_iris <- iris[, 1:2]
partition2_iris <- iris[, 3:4]
# Run the vertical_corr function on the partitions
correlation_mtcars <- vertical_corr(partition1_mtcars, partition2_mtcars)
#correlation_iris <- vertical_corr(partition1_iris, partition2_iris)
correlation_iris <- vertical_corr(iris[,1],iris[,2])
# Print out the results
#print(correlation_mtcars)
print(correlation_iris)
corr <- vertical_corr(A1,A2)
corr
# Load the datasets
data(mtcars)
data(iris)
# Ensure iris dataset is numeric only
iris <- iris[, sapply(iris, is.numeric)]
# Split the datasets into two partitions
partition1_mtcars <- mtcars[, 1:6]
partition2_mtcars <- mtcars[, 7:ncol(mtcars)]
partition1_iris <- iris[, 1:2]
partition2_iris <- iris[, 3:4]
# Run the vertical_corr function on the partitions
correlation_mtcars <- vertical_corr(partition1_mtcars, partition2_mtcars)
#correlation_iris <- vertical_corr(partition1_iris, partition2_iris)
correlation_iris <- get_corr(iris[,1:2])
# Print out the results
#print(correlation_mtcars)
print(correlation_iris)
# Load the datasets
data(mtcars)
data(iris)
# Ensure iris dataset is numeric only
iris <- iris[, sapply(iris, is.numeric)]
# Split the datasets into two partitions
partition1_mtcars <- mtcars[, 1:6]
partition2_mtcars <- mtcars[, 7:ncol(mtcars)]
partition1_iris <- iris[, 1:2]
partition2_iris <- iris[, 3:4]
# Run the vertical_corr function on the partitions
correlation_mtcars <- vertical_corr(partition1_mtcars, partition2_mtcars)
correlation_iris <- vertical_corr(scale(partition1_iris), scale(partition2_iris))
#correlation_iris <- get_corr(iris[,1:2])
# Print out the results
#print(correlation_mtcars)
print(correlation_iris)
# Load the datasets
data(mtcars)
data(iris)
# Ensure iris dataset is numeric only
iris <- iris[, sapply(iris, is.numeric)]
# Split the datasets into two partitions
partition1_mtcars <- mtcars[, 1:6]
partition2_mtcars <- mtcars[, 7:ncol(mtcars)]
partition1_iris <- iris[, 1]
partition2_iris <- iris[, 2]
# Run the vertical_corr function on the partitions
correlation_mtcars <- vertical_corr(partition1_mtcars, partition2_mtcars)
correlation_iris <- vertical_corr(scale(partition1_iris), scale(partition2_iris))
#correlation_iris <- get_corr(iris[,1:2])
# Print out the results
#print(correlation_mtcars)
print(correlation_iris)
vertical2 <- function(data1, data2) {
# Initialize an empty matrix for combined U * d
U_combined <- matrix(, nrow = nrow(data1), ncol = 0)
# Perform SVD on each column of data1
for(i in seq_len(ncol(data1))) {
svd_col <- svd(data1[, i, drop = FALSE])  # drop = FALSE to keep matrix structure even for one column
U_combined <- cbind(U_combined, svd_col$u %*% diag(svd_col$d))
}
# Perform SVD on each column of data2
for(i in seq_len(ncol(data2))) {
svd_col <- svd(data2[, i, drop = FALSE])
U_combined <- cbind(U_combined, svd_col$u %*% diag(svd_col$d))
}
# Perform SVD on the combined U matrix
svd_final <- svd(U_combined)
# Calculate and scale the correlation matrix
correlation <- svd_final$v %*% diag(svd_final$d^2) %*% t(svd_final$v)
correlation <- correlation / correlation[1, 1]
return(correlation)
}
vertical2(partition1_iris,partition2_iris)
vertical2 <- function(data1, data2) {
# Initialize an empty matrix for combined U * d
#U_combined <- matrix(, nrow = nrow(data1), ncol = 0)
# Perform SVD on each column of data1
for(i in seq_len(ncol(data1))) {
svd_col <- svd(data1[, i, drop = FALSE])  # drop = FALSE to keep matrix structure even for one column
U_combined <- cbind(U_combined, svd_col$u %*% diag(svd_col$d))
}
# Perform SVD on each column of data2
for(i in seq_len(ncol(data2))) {
svd_col <- svd(data2[, i, drop = FALSE])
U_combined <- cbind(U_combined, svd_col$u %*% diag(svd_col$d))
}
# Perform SVD on the combined U matrix
svd_final <- svd(U_combined)
# Calculate and scale the correlation matrix
correlation <- svd_final$v %*% diag(svd_final$d^2) %*% t(svd_final$v)
correlation <- correlation / correlation[1, 1]
return(correlation)
}
vertical2(partition1_iris,partition2_iris)
vertical2(scale(partition1_iris),scale(partition2_iris))
vertical2 <- function(data1, data2) {
# Initialize an empty matrix for combined U * d
U_combined <- matrix(, nrow = nrow(data1), ncol = 0)
# Perform SVD on each column of data1
for(i in seq_len(ncol(data1))) {
svd_col <- svd(data1[, i, drop = FALSE])  # drop = FALSE to keep matrix structure even for one column
U_combined <- cbind(U_combined, svd_col$u %*% diag(svd_col$d))
}
# Perform SVD on each column of data2
for(i in seq_len(ncol(data2))) {
svd_col <- svd(data2[, i, drop = FALSE])
U_combined <- cbind(U_combined, svd_col$u %*% diag(svd_col$d))
}
# Perform SVD on the combined U matrix
svd_final <- svd(U_combined)
# Calculate and scale the correlation matrix
correlation <- svd_final$v %*% diag(svd_final$d^2) %*% t(svd_final$v)
correlation <- correlation / correlation[1, 1]
return(correlation)
}
vertical2(scale(partition1_iris),scale(partition2_iris))
vertical2 <- function(data1, data2) {
# Initialize an empty matrix for combined U * d
#U_combined <- matrix(, nrow = nrow(data1), ncol = 0)
U_combined <- 0
# Perform SVD on each column of data1
for(i in seq_len(ncol(data1))) {
svd_col <- svd(data1[, i, drop = FALSE])  # drop = FALSE to keep matrix structure even for one column
if(U_combined == 0){U_combined <- svd_col$u %*% diag(svd_col$d)}
else{U_combined <- cbind(U_combined, svd_col$u %*% diag(svd_col$d))}
}
# Perform SVD on each column of data2
for(i in seq_len(ncol(data2))) {
svd_col <- svd(data2[, i, drop = FALSE])
U_combined <- cbind(U_combined, svd_col$u %*% diag(svd_col$d))
}
# Perform SVD on the combined U matrix
svd_final <- svd(U_combined)
# Calculate and scale the correlation matrix
correlation <- svd_final$v %*% diag(svd_final$d^2) %*% t(svd_final$v)
correlation <- correlation / correlation[1, 1]
return(correlation)
}
vertical2(scale(partition1_iris),scale(partition2_iris))
# Load the datasets
data(mtcars)
data(iris)
# Ensure iris dataset is numeric only
iris <- iris[, sapply(iris, is.numeric)]
# Split the datasets into two partitions
partition1_mtcars <- mtcars[, 1:6]
partition2_mtcars <- mtcars[, 7:ncol(mtcars)]
partition1_iris <- iris[, 1]
partition2_iris <- iris[, 2]
# Run the vertical_corr function on the partitions
correlation_mtcars <- vertical_corr(partition1_mtcars, partition2_mtcars)
correlation_iris <- vertical_corr(scale(partition1_iris), scale(partition2_iris))
#correlation_iris <- get_corr(iris[,1:2])
# Print out the results
#print(correlation_mtcars)
print(correlation_iris)
vertical3 <- function(data1, data2) {
# Initialize matrices to store the combined U and D from each column's SVD
U_combined <- NULL
D_combined <- NULL
# Function to perform SVD on a single column and combine the results
process_column <- function(column) {
svd_col <- svd(matrix(column, nrow = length(column)))
list(u = svd_col$u, d = svd_col$d)
}
# Process each column of data1
for(i in 1:ncol(data1)) {
svd_result <- process_column(data1[, i])
U_combined <- cbind(U_combined, svd_result$u %*% diag(svd_result$d))
D_combined <- c(U_combined, svd_result$d)
}
# Process each column of data2
for(i in 1:ncol(data2)) {
svd_result <- process_column(data2[, i])
U_combined <- cbind(U_combined, svd_result$u %*% diag(svd_result$d))
D_combined <- c(U_combined, svd_result$d)
}
# Perform SVD on the combined U matrix
svd_final <- svd(U_combined)
# Calculate the correlation matrix
D_squared <- diag(svd_final$d^2)
correlation <- svd_final$v %*% D_squared %*% t(svd_final$v)
# Normalize the correlation matrix
max_correlation <- max(abs(correlation))
correlation <- correlation / max_correlation
return(correlation)
}
vertical3(partition1_mtcars,partition2_mtcars)
vertical3 <- function(data1, data2) {
# Initialize matrices to store the combined U and D from each column's SVD
U_combined <- NULL
D_combined <- NULL
# Function to perform SVD on a single column and combine the results
process_column <- function(column) {
svd_col <- svd(matrix(column, nrow = length(column)))
list(u = svd_col$u, d = svd_col$d)
}
# Process each column of data1
for(i in 1:ncol(data1)) {
svd_result <- process_column(data1[, i])
U_combined <- cbind(U_combined, svd_result$u %*% svd_result$d)
D_combined <- c(U_combined, svd_result$d)
}
# Process each column of data2
for(i in 1:ncol(data2)) {
svd_result <- process_column(data2[, i])
U_combined <- cbind(U_combined, svd_result$u %*% svd_result$d)
D_combined <- c(U_combined, svd_result$d)
}
# Perform SVD on the combined U matrix
svd_final <- svd(U_combined)
# Calculate the correlation matrix
D_squared <- diag(svd_final$d^2)
correlation <- svd_final$v %*% D_squared %*% t(svd_final$v)
# Normalize the correlation matrix
max_correlation <- max(abs(correlation))
correlation <- correlation / max_correlation
return(correlation)
}
vertical3(partition1_mtcars,partition2_mtcars)
# Load the datasets
data(mtcars)
data(iris)
# Ensure iris dataset is numeric only
iris <- iris[, sapply(iris, is.numeric)]
# Split the datasets into two partitions
partition1_mtcars <- mtcars[, 1:6]
partition2_mtcars <- mtcars[, 7:ncol(mtcars)]
partition1_iris <- iris[, 1:2]
partition2_iris <- iris[, 3:4]
# Run the vertical_corr function on the partitions
correlation_mtcars <- vertical_corr(partition1_mtcars, partition2_mtcars)
correlation_iris <- vertical_corr(scale(partition1_iris), scale(partition2_iris))
#correlation_iris <- get_corr(iris[,1:2])
# Print out the results
#print(correlation_mtcars)
print(correlation_iris)
vertical3 <- function(data1, data2) {
# Initialize matrices to store the combined U and D from each column's SVD
U_combined <- NULL
D_combined <- NULL
# Function to perform SVD on a single column and combine the results
process_column <- function(column) {
svd_col <- svd(matrix(column, nrow = length(column)))
list(u = svd_col$u, d = svd_col$d)
}
# Process each column of data1
for(i in 1:ncol(data1)) {
svd_result <- process_column(data1[, i])
U_combined <- cbind(U_combined, svd_result$u %*% svd_result$d)
D_combined <- c(U_combined, svd_result$d)
}
# Process each column of data2
for(i in 1:ncol(data2)) {
svd_result <- process_column(data2[, i])
U_combined <- cbind(U_combined, svd_result$u %*% svd_result$d)
D_combined <- c(U_combined, svd_result$d)
}
# Perform SVD on the combined U matrix
svd_final <- svd(U_combined)
# Calculate the correlation matrix
D_squared <- diag(svd_final$d^2)
correlation <- svd_final$v %*% D_squared %*% t(svd_final$v)
# Normalize the correlation matrix
max_correlation <- max(abs(correlation))
correlation <- correlation / max_correlation
return(correlation)
}
vertical3(scale(partition1_mtcars),(partition2_mtcars))
vertical3(partition1_iris,partition2_iris)
vertical2 <- function(data1, data2) {
# Initialize an empty matrix for combined U * d
U_combined <- matrix(, nrow = nrow(data1), ncol = 0)
# Perform SVD on each column of data1
for(i in seq_len(ncol(data1))) {
svd_col <- svd(data1[, i, drop = FALSE])  # drop = FALSE to keep matrix structure even for one column
U_combined <- cbind(U_combined, svd_col$u %*% svd_col$d)
}
# Perform SVD on each column of data2
for(i in seq_len(ncol(data2))) {
svd_col <- svd(data2[, i, drop = FALSE])
U_combined <- cbind(U_combined, svd_col$u %*% svd_col$d)
}
# Perform SVD on the combined U matrix
svd_final <- svd(U_combined)
# Calculate and scale the correlation matrix
correlation <- svd_final$v %*% diag(svd_final$d^2) %*% t(svd_final$v)
correlation <- correlation / correlation[1, 1]
return(correlation)
}
vertical2(scale(partition1_iris),scale(partition2_iris))
cor(iris)
vertical2(scale(partition1_mtcars),scale(partition2_mtcars))
cor(mtcars)
devtools::load_all(".")
A <- matrix(c(3, -1, 1, 3, 1, 1, 4, -2,5,1), nrow = 5, ncol = 2, byrow = TRUE)
print(A)
#This is generalized so I can use it for other datasets
n <- dim(A)[2]
k <- floor(n/2)
A <- scale(A)
A1 <- A[, 1:k]
A2 <- A[, (k+1):n]
corr <- vertical_corr(A1,A2)
devtools::load_all(".")
corr <- vertical_corr(A1,A2)
# Load the datasets
data(mtcars)
data(iris)
# Ensure iris dataset is numeric only
iris <- iris[, sapply(iris, is.numeric)]
# Split the datasets into two partitions
partition1_mtcars <- mtcars[, 1:6]
partition2_mtcars <- mtcars[, 7:ncol(mtcars)]
partition1_iris <- iris[, 1:2]
partition2_iris <- iris[, 3:4]
# Run the vertical_corr function on the partitions
correlation_mtcars <- vertical_corr(partition1_mtcars, partition2_mtcars)
correlation_iris <- vertical_corr(scale(partition1_iris), scale(partition2_iris))
#correlation_iris <- get_corr(iris[,1:2])
# Print out the results
#print(correlation_mtcars)
print(correlation_iris)
cor(iris)
# Load the datasets
data(mtcars)
data(iris)
# Ensure iris dataset is numeric only
iris <- iris[, sapply(iris, is.numeric)]
# Split the datasets into two partitions
partition1_mtcars <- mtcars[, 1:6]
partition2_mtcars <- mtcars[, 7:ncol(mtcars)]
partition1_iris <- iris[, 1:2]
partition2_iris <- iris[, 3:4]
# Run the vertical_corr function on the partitions
correlation_mtcars <- vertical_corr(scale(partition1_mtcars), scale(partition2_mtcars))
correlation_iris <- vertical_corr(scale(partition1_iris), scale(partition2_iris))
# Print out the results
print(correlation_mtcars)
print(correlation_iris)
cor(iris)
cor(mtcars)
corr <- vertical_corr(A1,A2)
ncol(A1)
ncol(A)
A1
A
corr <- vertical_corr(A[,1],A2[,2])
use_r("hash_text")
library(devtools)
use_r("hash_text")
knitr::opts_chunk$set(echo = TRUE)
align_datasets <- function(dataset1, dataset2, id_var) {
# Check if the id_var exists in both datasets
if (!(id_var %in% colnames(dataset1)) | !(id_var %in% colnames(dataset2))) {
stop("The id_var does not exist in one or both datasets.")
}
# Hash the id variable in both datasets
dataset1$hash <- as.integer(digest::digest(dataset1[[id_var]], algo = "xxhash64"))
dataset2$hash <- as.integer(digest::digest(dataset2[[id_var]], algo = "xxhash64"))
# Merge the datasets based on the hashes
merged_dataset <- merge(dataset1, dataset2, by = "hash", all = TRUE)
# Remove the hash column from the merged dataset
merged_dataset <- merged_dataset[, !(names(merged_dataset) %in% c("hash"))]
# Return the merged dataset
return(merged_dataset)
}
# Load the required package
library(digest)
# Create two example datasets
id = c("one","two","three","four","five")
dataset1 <- data.frame(id = id, value1 = rnorm(5))
dataset2 <- data.frame(id = id, value2 = rnorm(5))
# Align the datasets based on the 'id' variable
aligned_dataset <- align_datasets(dataset1, dataset2, "id")
devtools::load_all(".")
# Example usage
strings <- list("hello", "world", "R")
hashes_additive <- hash_strings(strings, "additive")
# Example usage
strings <- list("hello", "world", "R")
hashes_additive <- hash_text(strings, "additive")
hashes_polynomial <- hash_text(strings, "polynomial")
print(hashes_additive)
print(hashes_polynomial)
# Example usage
strings <- list("one", "two", "three")
hashes_additive <- hash_text(strings, "additive")
hashes_polynomial <- hash_text(strings, "polynomial")
print(hashes_additive)
print(hashes_polynomial)
?hash_text
?vertical_corr
use_r("vertCorDS")
parent.frame()
parent.env()
devtools::load_all(".")
